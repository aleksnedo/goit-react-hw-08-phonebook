{"version":3,"file":"static/js/821.692f3bce.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Form/Form.styled.jsx","components/Form/Form.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactEditor/ContactEditor.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\nimport { Button } from '@mui/material';\n\nexport const FormStyle = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 30px;\n  padding: 30px;\n  border: 1px solid #1976d2;\n  border-radius: 4px;\n  box-shadow: 3px 3px 20px 10px #1976d275;\n  margin-bottom: 15px;\n  width: 340px;\n`;\n\nexport const Label = styled.label`\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nexport const Input = styled(Field)`\n  width: 300px;\n`;\n\nexport const ButtonAdd = styled(Button)`\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 300px;\n`;\n","import { Formik } from 'formik';\nimport { FormStyle, Label, Input, ButtonAdd } from './Form.styled';\nimport { TextField } from 'formik-mui';\nimport { toast } from 'react-hot-toast';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const Form = () => {\n  const { contactsList } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const dublicateContact = findDublicate(values, contactsList);\n    dublicateContact\n      ? toast.error(\n          `Name \"${values.name}\" or Number \"${values.number}\" is already in your contacts`\n        )\n      : dispatch(addContact(values));\n\n    resetForm();\n  };\n\n  const findDublicate = (contact, contactsList) => {\n    return contactsList.find(\n      item =>\n        item.name.toLowerCase() === contact.name.toLowerCase() ||\n        item.number === contact.number\n    );\n  };\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={values => {\n        const errors = {};\n        if (!values.name) {\n          errors.name = 'Required';\n        } else if (!values.number) {\n          errors.number = 'Required';\n        } else if (\n          !/^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){3,14}(\\s*)?$/i.test(\n            values.number\n          )\n        ) {\n          errors.number = 'Invalid - only digits, at least 3';\n        }\n        return errors;\n      }}\n      onSubmit={handleSubmit}\n    >\n      <FormStyle autoComplete=\"on\">\n        <Label htmlFor=\"name\">\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\"Enter name\"\n            component={TextField}\n            label=\"Name\"\n            fullWidth\n            margin=\"normal\"\n          />\n        </Label>\n        <Label htmlFor=\"number\">\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\"Enter number\"\n            component={TextField}\n            label=\"Number\"\n            fullWidth\n            margin=\"normal\"\n          />\n        </Label>\n\n        <ButtonAdd type=\"submit\" variant=\"contained\">\n          Add Contact\n        </ButtonAdd>\n      </FormStyle>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\nimport { TextField } from '@mui/material';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 30px;\n  border: 1px solid #1976d2;\n  border-radius: 4px;\n  box-shadow: 3px 3px 20px 10px #1976d275;\n  width: 340px;\n  margin-bottom: 15px;\n`;\n\nexport const Label = styled.label`\n  font-size: 20px;\n  font-weight: 600;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const TextFieldStyle = styled(TextField)`\n  width: 300px;\n`;\n","import { Form, TextFieldStyle } from './Filter.styled';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { onChangeFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const { filter } = useSelector(selectFilter);\n\n  const handleChangeFilter = e => {\n    dispatch(onChangeFilter(e.currentTarget.value));\n  };\n\n  return (\n    <Form>\n      <TextFieldStyle\n        value={filter}\n        onChange={handleChangeFilter}\n        type=\"text\"\n        name=\"filter\"\n        label=\"Find contacts by name\"\n        placeholder=\"Enter name\"\n        fullWidth\n        margin=\"normal\"\n      />\n    </Form>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nimport { Form } from '../Form/Form';\nimport { Loader } from '../Loader/Loader';\nimport { Filter } from '../Filter/Filter';\n\nexport const ContactEditor = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <>\n      <Form />\n      <Filter />\n      {isLoading && !error && <Loader />}\n    </>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Button } from '@mui/material';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 30px;\n  border: 1px solid #1976d2;\n  border-radius: 4px;\n  box-shadow: 3px 3px 20px 10px #1976d275;\n  width: 500px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 50px;\n`;\n\nexport const Name = styled.p`\n  font-size: 18px;\n  font-weight: 600;\n`;\nexport const Number = styled.span`\n  color: #1976d2;\n`;\n\nexport const Btn = styled(Button)`\n  font-size: 12px;\n  width: 70px;\n`;\n","import PropTypes from 'prop-types';\nimport { Wrapper, List, Item, Name, Number, Btn } from './ContactList.styled';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const { contactsList } = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const getFilterContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contactsList.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const visibleContacts = getFilterContacts();\n\n  return (\n    <Wrapper>\n      <List>\n        {visibleContacts.length === 0 && <p>There is not any contacts</p>}\n        {visibleContacts.map(({ id, name, number }) => {\n          return (\n            <Item key={id}>\n              <Name>\n                {name}: <Number>{number}</Number>\n              </Name>\n              <Btn\n                type=\"button\"\n                onClick={() => handleDelete(id)}\n                variant=\"outlined\"\n                size=\"small\"\n              >\n                Delete\n              </Btn>\n            </Item>\n          );\n        })}\n      </List>\n    </Wrapper>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const Section = styled.section`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { Helmet } from 'react-helmet';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nimport { Section } from './Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n\n      <Section>\n        <ContactEditor />\n        <ContactList />\n      </Section>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","FormStyle","styled","Form","Label","Input","Field","ButtonAdd","Button","contactsList","useSelector","dispatch","useDispatch","findDublicate","contact","find","item","name","toLowerCase","number","initialValues","validate","values","errors","test","onSubmit","resetForm","toast","addContact","autoComplete","htmlFor","type","pattern","title","placeholder","component","TextField","label","fullWidth","margin","variant","TextFieldStyle","Filter","value","onChange","e","onChangeFilter","currentTarget","ContactEditor","Loader","Wrapper","List","Item","Name","Number","Btn","ContactList","visibleContacts","normalizedFilter","includes","getFilterContacts","length","map","id","onClick","contactId","deleteContact","size","Section","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}