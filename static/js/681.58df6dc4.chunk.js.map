{"version":3,"file":"static/js/681.58df6dc4.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Form/Form.styled.jsx","components/Form/Form.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactEditor/ContactEditor.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\nimport { Button } from '@mui/material';\n\nexport const FormStyle = styled(Form)`\n  /* display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 30px;\n  padding: 30px;\n  border: 2px solid gray;\n  border-radius: 5px;\n  box-shadow: 3px 3px 30px 3px rgba(0, 0, 0, 0.75); */\n`;\n\nexport const Label = styled.label`\n  font-size: 18px;\n  font-weight: 600;\n  display: flex;\n  justify-content: space-between;\n  width: 300px;\n`;\n\nexport const Input = styled(Field)`\n  /* height: 20px;\n  width: 200px; */\n`;\n\nexport const ButtonAdd = styled(Button)`\n  font-size: 14px;\n  font-weight: 600;\n  text-transform: uppercase;\n  padding: 10px;\n  width: 150px;\n  border: none;\n  border-radius: 10px;\n  cursor: pointer;\n  color: white;\n  background-color: #4d4c4c;\n  transition: scale 100ms cubic-bezier(0.455, 0.03, 0.515, 0.5);\n  &:active {\n    scale: 0.95;\n  }\n`;\n","import { Formik } from 'formik';\nimport { FormStyle, Label, Input, ButtonAdd } from './Form.styled';\nimport { TextField } from 'formik-mui';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const Form = () => {\n  const { contactsList } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const dublicateContact = findDublicate(values, contactsList);\n    dublicateContact\n      ? alert(`${values.name} or ${values.phone} is already in contacts`)\n      : dispatch(addContact(values));\n\n    resetForm();\n  };\n\n  const findDublicate = (contact, contactsList) => {\n    return contactsList.find(\n      item =>\n        item.name.toLowerCase() === contact.name.toLowerCase() ||\n        item.number === contact.number\n    );\n  };\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={values => {\n        const errors = {};\n        if (!values.name) {\n          errors.name = 'Required';\n        } else if (!values.number) {\n          errors.number = 'Required';\n        } else if (\n          !/^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){3,14}(\\s*)?$/i.test(\n            values.number\n          )\n        ) {\n          errors.number = 'Invalid - only digits, at least 3';\n        }\n        return errors;\n      }}\n      onSubmit={handleSubmit}\n    >\n      <FormStyle autoComplete=\"on\">\n        <Label htmlFor=\"name\">\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\"Enter name\"\n            component={TextField}\n          />\n        </Label>\n        <Label htmlFor=\"number\">\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\"Enter number\"\n            component={TextField}\n          />\n        </Label>\n\n        <ButtonAdd type=\"submit\">Add Contact</ButtonAdd>\n      </FormStyle>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  font-size: 20px;\n  font-weight: 600;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const Input = styled.input`\n  height: 20px;\n  width: 200px;\n`;\n","import { Label, Input } from './Filter.styled';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { onChangeFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const { filter } = useSelector(selectFilter);\n\n  const handleChangeFilter = e => {\n    dispatch(onChangeFilter(e.currentTarget.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChangeFilter}\n      />\n    </Label>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nimport { Form } from '../Form/Form';\nimport { Loader } from '../Loader/Loader';\nimport { Filter } from '../Filter/Filter';\n\nexport const ContactEditor = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <>\n      <Form />\n      {isLoading && !error && <Loader />}\n      <Filter />\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  gap: 50px;\n`;\n\nexport const Name = styled.p`\n  font-size: 18px;\n  font-weight: 600;\n`;\nexport const Number = styled.span`\n  color: gray;\n`;\n\nexport const Button = styled.button`\n  border: none;\n  border-radius: 10px;\n  cursor: pointer;\n  color: white;\n  background-color: #4d4c4c;\n  padding: 5px;\n  width: 70px;\n  transition: scale 100ms cubic-bezier(0.455, 0.03, 0.515, 0.5);\n  &:active {\n    scale: 0.9;\n  }\n`;","import PropTypes from 'prop-types';\nimport { List, Item, Name, Number, Button } from './ContactList.styled';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const { contactsList } = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const getFilterContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contactsList.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const visibleContacts = getFilterContacts();\n\n  return (\n    <List>\n      {visibleContacts.length === 0 && <p>There is not any contacts</p>}\n      {visibleContacts.map(({ id, name, number }) => {\n        return (\n          <Item key={id}>\n            <Name>\n              {name}: <Number>{number}</Number>\n            </Name>\n            <Button type=\"button\" onClick={() => handleDelete(id)}>\n              Delete\n            </Button>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { Helmet } from 'react-helmet';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n\n      <section>\n        <ContactEditor />\n        <ContactList />\n      </section>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","FormStyle","styled","Form","Label","Input","Field","ButtonAdd","Button","contactsList","useSelector","dispatch","useDispatch","findDublicate","contact","find","item","name","toLowerCase","number","initialValues","validate","values","errors","test","onSubmit","resetForm","alert","phone","addContact","autoComplete","htmlFor","type","pattern","title","placeholder","component","TextField","Filter","value","onChange","e","onChangeFilter","currentTarget","ContactEditor","Loader","List","Item","Name","Number","ContactList","visibleContacts","normalizedFilter","includes","getFilterContacts","length","map","id","onClick","contactId","deleteContact","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}